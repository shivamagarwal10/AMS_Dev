@model EmployeeAttendenceMangement.Models.EmployeeCreateModel

@{
    ViewBag.Title = "Edit";
}

<style type="text/css">

    <style >
    h3 {
        padding: 20px;
    }

    .form-control1 {
        height: 35px;
        min-width: 255px;
        border: ridge;
        padding-left: 1em;
        padding-right: 1em;
    }
</style>
<style type="text/css">

    .control-label:after {
        content: " *";
        font-weight: bold;
        color: red;
    }
</style>
<h3> Update Employee Details</h3>

@using (Html.BeginForm("Edit", "Employee", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="container-fluid">
        <div class="form-horizontal">

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.HiddenFor(model => model.EmployeeId)
                @Html.Label("First Name", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", required = "required", onKeyPress = "return ValidateAlpha(event)" } })
                    @Html.ValidationMessageFor(model => model.FirstName, "", new { style = "color:red " })
                    @TempData["msgName"]
                </div>
                @Html.Label("Last Name", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", required = "required", onKeyPress = "return ValidateAlpha(event)" } })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { style = "color:red " })
                    @TempData["msgName"]
                </div>
            </div>
            <div class="form-group">
                @Html.Label("Gender", htmlAttributes: new { @class = "control-label col-md-2" })

                <div class="col-md-3">
                    <label class="radio-inline ">
                        @Html.RadioButtonFor(model => model.Gender, "Male", new { @Name = "Gender" })Male
                    </label>
                    <label class="radio-inline ">
                        @Html.RadioButtonFor(model => model.Gender, "Female", new { @Name = "Gender" })
                        Female
                    </label>
                    <label class="radio-inline ">
                        @Html.RadioButtonFor(model => model.Gender, "Other", new { @Name = "Gender" })
                        Others
                    </label>
                </div>
                @Html.Label("Marital status", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    <label class="radio-inline ">
                        @Html.RadioButtonFor(model => model.Marital_status, "Married", new { @Name = "Marital_status" })Married
                    </label>
                    <label class="radio-inline ">
                        @Html.RadioButtonFor(model => model.Marital_status, "Unmarried", new { @Name = "Marital_status" })
                        UnMarried
                    </label>
                </div>
            </div>
            <div class="form-group">
                @Html.Label("Date of Birth", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @Html.TextBoxFor(m => m.DateofBirth, "{0:yyyy-MM-dd}", new { @class = "form-control1", type = "date", id = "DateofBirth", required = "required" })

                    @Html.ValidationMessageFor(model => model.DateofBirth, "", new { style = "color:red " })

                </div>
                @Html.Label("Joining Date", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @Html.TextBoxFor(m => m.Emp_Joining_Date, "{0:yyyy-MM-dd}", new { @class = "form-control1", type = "date", id = "Emp_Joining_Date", required = "required" })

                    @Html.ValidationMessageFor(model => model.Emp_Joining_Date, "", new { style = "color:red " })
                </div>
            </div>
            <div class="form-group">
                @Html.Label("Contact No", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @Html.EditorFor(model => model.Contact_No, new { htmlAttributes = new { @class = "form-control", required = "required", onkeypress = "return isNumberKey(event)" } })
                    @Html.ValidationMessageFor(model => model.Contact_No, "", new { style = "color:red " })
                    @TempData["msg1"]
                </div>
                @Html.Label("Alternate Contact No", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @Html.EditorFor(model => model.AlternateContact_No, new { htmlAttributes = new { @class = "form-control", required = "required", onkeypress = "return isNumberKey(event)" } })
                    @Html.ValidationMessageFor(model => model.AlternateContact_No, "", new { style = "color:red " })
                    @TempData["msg2"]
                </div>
            </div>
            <div class="form-group">
                @Html.Label("Country Name", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">

                    @Html.DropDownList("CountryId", new SelectList(ViewBag.CountryList, "CountryId", "CountryName"), "---Select Country Name---", htmlAttributes: new { @class = "form-control", @sstyle = "width:260px", Id = "Cid", required = "required" })


                    @Html.ValidationMessageFor(model => model.CountryId, "", new { style = "color:red " })

                </div>
                @Html.Label("State Name", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @if (ViewBag.CountryList1 != null)
                    {
                        @Html.DropDownListFor(model => model.StateId, new SelectList(ViewBag.CountryList1, "StateId", "StateName"), "---Select State Name ---", htmlAttributes: new { @class = "form-control", @sstyle = "width:260px", Id = "St", required = "required" })
                    }
                    else
                    {
                        @Html.DropDownListFor(model => model.StateId, new SelectList(""), "---Select State Name ---", htmlAttributes: new { @class = "form-control", @sstyle = "width:260px", Id = "St", required = "required" })
                    }
                    @Html.ValidationMessageFor(model => model.StateId, "", new { style = "color:red " })

                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                    @Html.ValidationMessageFor(model => model.City, "", new { style = "color:red " })
                </div>
                @Html.LabelFor(model => model.PinCode, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @Html.EditorFor(model => model.PinCode, new { htmlAttributes = new { @class = "form-control", required = "required", onkeypress = "return isNumberKey(event)" } })
                    @Html.ValidationMessageFor(model => model.PinCode, "", new { style = "color:red " })
                    @TempData["msgpincode"]
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                    @Html.ValidationMessageFor(model => model.Address, "", new { style = "color:red " })
                </div>
                @Html.Label("Email Id", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @Html.EditorFor(model => model.EmailId, new { htmlAttributes = new { @class = "form-control", required = "required", placeholder = "     --Enter Your Emailid--" } })
                    @Html.ValidationMessageFor(model => model.EmailId, "", new { style = "color:red " })
                    @TempData["msg"]
                    @TempData["msgemail"]
                </div>
            </div>

            

            <div class="form-group">
                <div class="col-md-offset-5 col-md-10">
                    <input type="submit" value="Update" class="btn btn-primary" id="btnAlert" />
                </div>
            </div>
        </div>
    </div>

}

@Scripts.Render("~/bundles/jquery")

@Scripts.Render("~/bundles/jqueryval")


<script type="text/javascript">

    $(function () {
        $('#HiddenFiled').hide();
        debugger;
        $("#Cid").change(function () {
            var id = $(this).val();
            $("#St").empty();
            $.get("/Employee/State_Bind", { CountryId: $("#Cid").val() }, function (data) {
                debugger;
                var v = "<option>---Select---</option>";
                $.each(data, function (i, v1) {
                    v += "<option value=" + v1.Value + ">" + v1.Text + "</option>";


                });
                $("#St").html(v);
            })
        });
    });

   
</script>














<script type="text/javascript">
    $(function () {
        debugger;
        $('#DateofBirth').change(function () {
            var age = CalculateAge();
            $("#DateofBirth").next('.validation').hide();
            if (age < 18) {

                $("#DateofBirth").after("<div class='validation' style='color:red;margin-bottom: 20px;'> you should be elder than 18 year</div>");
                document.getElementById("DateofBirth").value = "";
            }
            else {
                $("#DateofBirth").next('.validation').hide();
            }
        });
    });
    $('#Emp_Joining_Date').change(function () {
        var age = CalculateAge1();
        $("#Emp_Joining_Date").next('.validation').hide();
        if (age < 18) {
            $("#Emp_Joining_Date").after("<div class='validation' style='color:red;margin-bottom: 20px;'>you are not eligible for Registration</div>");
            document.getElementById("Emp_Joining_Date").value = "";
        }
        else {
            $("#Emp_Joining_Date").next('.validation').hide();
        }
    });


    function CalculateAge1() {
        debugger;
        var doj = $("#Emp_Joining_Date").val();
        var dob = $("#DateofBirth").val();
        dob = new Date(dob);
        doj = new Date(doj);

        var today = new Date();

        var age = Math.floor((doj - dob) / (365.25 * 24 * 60 * 60 * 1000));
        return age;

    }



    function CalculateAge() {
        debugger;
        var dob = $("#DateofBirth").val();
        dob = new Date(dob);

        var today = new Date();
        var age = Math.floor((today - dob) / (365.25 * 24 * 60 * 60 * 1000));

        return age;

    }

</script>



<script>
    function isNumberKey(evt) {

        var charCode = (evt.which) ? evt.which : evt.keyCode
        if (charCode != 46 && charCode > 31
            && (charCode < 48 || charCode > 57))
            return false;
        return true;
    }

    function ValidateAlpha(evt) {
        var keyCode = (evt.which) ? evt.which : evt.keyCode
        if ((keyCode < 65 || keyCode > 90) && (keyCode < 97 || keyCode > 123) && keyCode != 32)

            return false;
        return true;
    }
</script>