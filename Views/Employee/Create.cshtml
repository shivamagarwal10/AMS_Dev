@model EmployeeAttendenceMangement.Models.EmployeeCreateModel


<style>
    .form-horizontal {
        overflow: hidden;
    }

    
</style>

<style>
    body {
        background-image: url('../../bg/bg (3).jpg');
    }
    form {
        margin-top: 60px;
        box-shadow: 2px 6px 100px gray;
        border-radius: 10px 50px;
        border: 1px solid black;
        padding-top: 10px
    }

    .txt_right {
        margin-left: 20px;
    }

    .main-container {
        height: auto;
        margin-top: 10px;
    }

    .zoom:hover {
        -ms-transform: scale(1.1); /* IE 9 */
        -webkit-transform: scale(1); /* Safari 3-8 */
        transform: scale(1.1);
        transition: 0.5s;
    }

    #text {
        float: left;
        width: 100px;
    }


    select {
        width: 200px;
        height: 29px;
        border-radius: 3px;
        border: 1px solid #CCC;
        font-weight: 200;
        font-size: 15px;
        font-family: Verdana;
        box-shadow: 1px 1px 5px #CCC;
    }

        select: hover {
            width: 200px;
            height: 29px;
            border-radius: 3px;
            border: 1px solid #CCC;
            font-weight: 200;
            font-size: 15px;
            font-family: Verdana;
            box-shadow: 1px 1px 5px #CCC;
        }

    .reg 
    {
        margin-left: 40px;
    }
</style>


<style type="text/css">

    .control-label:after {
        content: " *";
        font-weight: bold;
        color: red;
    }

    .TempData["EmailValidation"] {
        color: red;
    }
</style>


<div class="header" style="margin-bottom:20px">

    <h1> Employee Registration </h1>

</div>


<style>
    div.header {
        background-color: black;
       padding-bottom:10px;
    }

    h1 {
        color: white;
        text-align: center;
        margin-top: 18px;
    }
    </style>



@using (Html.BeginForm("Create", "Employee", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal " >

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">

            @Html.Label("First Name", htmlAttributes: new { @class = "control-label col-md-2" })

            <div class="col-md-3">
                @Html.HiddenFor(model => model.EmployeeId)
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", required = "required", placeholder = "       --Enter Your  First Name--", onKeyPress = "return ValidateAlpha(event)" } })
                @TempData["msgName"]
                @Html.ValidationMessageFor(model => model.FirstName, "", new { style = "color:red " })
            </div>
            @Html.Label("Last Name", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.LastName, "--Enter Your  Last Name--", new { htmlAttributes = new { @class = "form-control", required = "required", placeholder = "     --Enter Your  Last Name--", onKeyPress = "return ValidateAlpha(event)" } })
                @TempData["msgLastName"]
                @Html.ValidationMessageFor(model => model.LastName, "", new { style = "color:red " })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Gender", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                <label class="radio-inline ">
                    @Html.RadioButtonFor(model => model.Gender, "Male", new { @Name = "Gender", required = "required" })Male
                </label>
                <label class="radio-inline ">
                    @Html.RadioButtonFor(model => model.Gender, "Female", new { @Name = "Gender", required = "required" })
                    Female

                </label>
                <label class="radio-inline ">
                    @Html.RadioButtonFor(model => model.Gender, "Other", new { @Name = "Gender", required = "required" })
                    Others

                </label><br />
                @Html.ValidationMessageFor(model => model.Gender, "", new { style = "color:red " })

            </div>

            @Html.Label("Marital status", htmlAttributes: new { @class = "control-label col-md-2" })

            <div class="col-md-3">
                <label class="radio-inline ">
                    @Html.RadioButtonFor(model => model.Marital_status, "Married", new { @Name = "Marital_status", required = "required" })Married
                </label>
                <label class="radio-inline">
                    @Html.RadioButtonFor(model => model.Marital_status, "Unmarried", new { @Name = "Marital_status", required = "required" })
                    Unmarried
                </label>
                <br />
                @Html.ValidationMessageFor(model => model.Marital_status, "", new { style = "color:red " })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Date of Birth", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.DateofBirth, "{0:dd/MM/yyyy}", new { htmlAttributes = new { @class = "form-control", ID = "DateofBirth", required = "required" } })
                @Html.ValidationMessageFor(model => model.DateofBirth, "", new { style = "color:red " })
            </div>

            @Html.Label("Joining Date", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.Emp_Joining_Date, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                @Html.ValidationMessageFor(model => model.Emp_Joining_Date, "", new { style = "color:red " })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Contact No", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.Contact_No, new { htmlAttributes = new { @class = "form-control", required = "", Id = "ContactTxt", maxlength = "10", placeholder = "      --Enter Your Contact No--", onkeypress = "return isNumberKey(event)" } })
                <div id="divMessage1" style="color:red; font-weight:bold;"></div>
                @Html.ValidationMessageFor(model => model.Contact_No, "", new { style = "color:red " })
            </div>
            @Html.Label("Alternate Contact No", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-3">
            @Html.EditorFor(model => model.AlternateContact_No, new { htmlAttributes = new { @class = "form-control", Id = "AltContactTxt", required = "required", maxlength = "10", placeholder = "     --Enter Your Alternate No--", onkeypress = "return isNumberKey(event)" } })
            @Html.ValidationMessageFor(model => model.AlternateContact_No, "", new { style = "color:red " })


        </div>

        </div>
        <div class="form-group">
            @Html.Label("Country Name", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">

                @Html.DropDownList("CountryId", new SelectList(ViewBag.CountryList, "CountryId", "CountryName"), "---Select Country Name---", htmlAttributes: new { @class = "form-control", @style = "width:260px", Id = "Cid", required = "required" })


                @Html.ValidationMessageFor(model => model.CountryId, "", new { style = "color:red " })

            </div>
            @Html.Label("State Name", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @if (ViewBag.CountryList1 != null)
                {
                    @Html.DropDownListFor(model => model.StateId, new SelectList(ViewBag.CountryList1, "StateId", "StateName"), "---Select State Name ---", htmlAttributes: new { @class = "form-control", @style = "width:260px", Id = "St", required = "required" })
                }
                else
                {
                    @Html.DropDownListFor(model => model.StateId, new SelectList(""), "---Select State Name ---", htmlAttributes: new { @class = "form-control", @style = "width:260px", Id = "St", required = "required" })
                }

                @Html.ValidationMessageFor(model => model.StateId, "", new { style = "color:red" })

            </div>
        </div>
        <div class="form-group">
            @Html.Label("City", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control", required = "required", placeholder = "     --Enter Your City Name--" } })
                @Html.ValidationMessageFor(model => model.City, "", new { style = "color:red " })
            </div>
            @Html.Label("PinCode", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.PinCode, new { htmlAttributes = new { @class = "form-control", required = "required", maxlength = "6", placeholder = "     --Enter Your PinCode--", onkeypress = "return isNumberKey(event)" } })
                @TempData["msgpincode"]
                @Html.ValidationMessageFor(model => model.PinCode, "", new { style = "color:red " })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Address", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.TextAreaFor(m => m.Address, new { @class = "form-control", onkeyup = "textAreaAdjust(this)", required = "required", placeholder = "     --Enter Your Full Address--" })
                @Html.ValidationMessageFor(model => model.Address, "", new { style = "color:red " })
            </div>
            @Html.Label("Email Id", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.EmailId, new { htmlAttributes = new { @class = "form-control", required = "required", placeholder = " --Enter Your Emailid--", AutoPostBack = "true", Id = "onEmailCheck" } })
                @Html.ValidationMessageFor(model => model.EmailId, "", new { style = "color:red " })

                <div id="divMessage" style="color:red; font-weight:bold;">@TempData["EmailValidation"]</div>
                @*<div class='validation' style='color:red;margin-bottom: 20px;'> @TempData["EmailValidation"] </div>*@

            </div>
        </div>
        <div class="form-group">
            @Html.Label("Alternate EmailId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.AlternateEmailId, new { htmlAttributes = new { @class = "form-control", required = "required", placeholder = " --Enter Your Emailid--", AutoPostBack = "true", Id = "onAltEmailCheck" } })
                @Html.ValidationMessageFor(model => model.AlternateEmailId, "", new { style = "color:red " })

                <div id="AltdivMessage" style="color:red; font-weight:bold;">@TempData["AltEmailmsg"]</div>
                @*<div class='validation' style='color:red;margin-bottom: 20px;'> @TempData["EmailValidation"] </div>*@

            </div>
            @Html.Label("Password", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-3">
            @Html.Editor("Password", new { htmlAttributes = new { @class = "form-control", required = "required", placeholder = "     --Enter Your Password No--", Id = "txtPassword" } })
            @Html.ValidationMessageFor(model => model.Password, "", new { style = "color:red " })
            <div id="msgPassword" style="color:red; font-weight:bold;"></div>
        </div>
        </div>
        <div class="form-group">
            <div class="col-md-8 " style="margin-left: 430px;">
                <input type="submit" value="save" class="col-md-4 btn btn-primary " id="submitButton" />
            </div>
        </div>
    </div>
}
@Scripts.Render("~/bundles/jquery")

@Scripts.Render("~/bundles/jqueryval")


<script>

    $('#onAltEmailCheck').blur(function () {
        debugger;
        $("#onAltEmailCheck").next('.validation').hide();

        if ($("#onAltEmailCheck").val() == $("#onEmailCheck").val()) {

            $("#AltdivMessage").html(" Primary EmailId  and Alternate EmailId should not be same,Type again !");
        }
        else
        {

            $("#AltdivMessage").html("");
        }
    });
</script>

<script>

    $('#AltContactTxt').blur(function () {
        debugger;

        $("#AltContactTxt").next('.validation').hide();

        if ($("#AltContactTxt").val() == $("#ContactTxt").val()) {

            $("#AltContactTxt").after("<div class='validation' style='color:red;margin-bottom: 20px;'> Primary Contact Number and Alternate Contact Number should not be same,Type again ! </div>");
        }
        else {
            $("#AltContactTxt").next('.validation').hide();
        }
    });
</script>

<script type="text/javascript">
    $(function () {
        $("#txtEmployeeId").hide();
        $("#Cid").change(function () {
            var id = $(this).val();
            $("#St").empty();
            $.get("/Employee/State_Bind", { CountryId: $("#Cid").val() }, function (data) {

                var v = "<option>---Select---</option>";
                $.each(data, function (i, v1) {
                    v += "<option value=" + v1.Value + ">" + v1.Text + "</option>";

                });
                $("#St").html(v);
            })
        });
    });

    $(function () {
        debugger;
        $("#onEmailCheck").blur(function () {
            var email = $("#onEmailCheck").val();
            $.ajax
                ({
                    method: "POST",
                    url: "/Employee/ValidateEmailId/",
                    data: { emailId: email }

                })
                .done(function (msg) {
                    if (msg == 1) {
                        debugger;
                        $("#divMessage").html("EmailId all ready registered");
                        return false;
                    } else {
                        debugger;
                        $("#divMessage").html("");
                    }
                });
        })
    });
</script>
<script type="text/javascript">
    $(function () {

        $('#DateofBirth').change(function () {
            $("#DateofBirth").next('.validation').hide();
            var age = CalculateAge();
            if (age < 18) {
                $("#DateofBirth").after("<div class='validation' style='color:red;margin-bottom: 20px;'> you should be elder than 18 year </div>");
                document.getElementById("DateofBirth").value = "";
            }
            else {
                $("#DateofBirth").next('.validation').hide();
            }
        });

    });



    $('#Emp_Joining_Date').change(function () {
        $("#Emp_Joining_Date").next('.validation').hide();
        debugger;
        var age = CalculateAge1();
        var age1 = CalculateAge2();
        if (age < 18) {
            $("#Emp_Joining_Date").after("<div class='validation' style='color:red;margin-bottom: 20px;'>Joining date must be greater than 18year to  Date of Birth</div>");
            document.getElementById("Emp_Joining_Date").value = "";
        }
        else {
            $("#Emp_Joining_Date").next('.validation').hide();
            if (age1 < 0) {
                $("#Emp_Joining_Date").after("<div class='validation' style='color:red;margin-bottom: 20px;'>Joining date should not be greater than today's date</div>");
                document.getElementById("Emp_Joining_Date").value = "";
            }
        }
    });

    function CalculateAge1() {
        debugger;
        var doj = $("#Emp_Joining_Date").val();
        var dob = $("#DateofBirth").val();
        dob = new Date(dob);
        doj = new Date(doj);
        var today = new Date();
        var age = Math.floor((doj - dob) / (365.25 * 24 * 60 * 60 * 1000));
        return age;

    }

    function CalculateAge() {
        var dob = $("#DateofBirth").val();
        dob = new Date(dob);
        var today = new Date();
        var age = Math.floor((today - dob) / (365.25 * 24 * 60 * 60 * 1000));
        return age;
    }
    function CalculateAge2() {
        debugger;
        var dob = $("#Emp_Joining_Date").val();
        dob = new Date(dob);
        var today = new Date();
        var age1 = Math.floor((today - dob) / (365.25 * 24 * 60 * 60 * 1000));
        return age1;
    }
</script>



<script type="text/javascript">
    function textAreaAdjust(element) {
        element.style.height = "1px";
        element.style.height = (25 + element.scrollHeight) + "px";
    }
</script>

<script>
    function isNumberKey(evt) {

        var charCode = (evt.which) ? evt.which : evt.keyCode
        if (charCode != 46 && charCode > 31
            && (charCode < 48 || charCode > 57))
            return false;
        return true;
    }

    function ValidateAlpha(evt) {
        var keyCode = (evt.which) ? evt.which : evt.keyCode
        if ((keyCode < 65 || keyCode > 90) && (keyCode < 97 || keyCode > 123) && keyCode != 32)

            return false;
        return true;
    }
</script>


<script>

    $(function () {


        $("#txtPassword").change(function () {
            debugger;
            var Paswword = $("#txtPassword").val();

            var paswd = /^[a-zA-Z0-9!#$%^&*]{6,16}$/;
            if (paswd.test(Paswword)) {
                $("#msgPassword").html("password contain between 5 to 10 characters which contain at least one lowercase letter, one uppercase letter, one numeric digit, and one special character");
            }
            else
            {
                $("#msgPassword").html("");

            }

        })
    });

</script>

