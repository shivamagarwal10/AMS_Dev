@model EmployeeAttendenceMangement.Models.EmployeeAttandenceModel



<style>
    .form-horizontal {
        overflow: hidden;
    }

    h3 {
        padding: 10px;
    }
</style>

<h3> Update Employee Attendance </h3>
<hr />

@using (Html.BeginForm("UpdateAttendance", "EmployeeAttendance", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">

            @Html.Label("Employee Name", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.HiddenFor(model => model.EmpAtendenceId)
                @Html.HiddenFor(model => model.EmployeeId)
                @Html.TextBox("EmployeeId", Session["AltEmployeeId"].ToString(), htmlAttributes: new { @class = "form-control", @style = "width:250px", Id = "EmpIdHide" })

                @Html.TextBox("FirstName", Session["AltFirstName"] + " " + Session["AltlastName"].ToString(), htmlAttributes: new { @class = "form-control", @style = "width:260px", Id = "pId", required = "required", @readonly = "readonly" })

                @Html.ValidationMessageFor(model => model.EmployeeId, "", new { @class = "text-danger" })
            </div>
            @*@Html.Label("Project Name", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">

                    @Html.DropDownList("projectId", ViewBag.Emp_Project_Mapping as SelectList, "--Select Project--", htmlAttributes: new { @class = "form-control", @style = "width:260px", Id = "Empid", required = "required" })

                    @Html.ValidationMessageFor(model => model.projectId, "", new { @class = "text-danger" })
                </div>*@
        </div>

        <div class="form-group">
            @Html.Label("InTime", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.Intime, new { htmlAttributes = new { @class = "form-control", required = "required", Id = "TxtIntime", @readonly = "readonly" } })

                @Html.ValidationMessageFor(model => model.Intime, "", new { @class = "text-danger" })
            </div>
            @Html.Label("OutTime", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-3">
            @if (Session["Outtime"] == null)
            {
                @Html.TextBoxFor(x => x.OutTime, new { @class = "form-control", style = "width:260px", Id = "TxtOuttime", @readonly = "readonly", required = "required" })
            }
            else
            {
                @Html.TextBoxFor(x => x.OutTime, Session["Outtime"].ToString(), new { @class = "form-control", style = "width:260px", @readonly = "readonly", required = "required" });
            }
            @Html.ValidationMessageFor(model => model.OutTime, "", new { @class = "text-danger" })
        </div>
        </div>

        <div class="form-group">
            @Html.Label("Latitude", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.Editor("Latitude", new { htmlAttributes = new { @class = "form-control", required = "required", Id = "GetLatitudee", @readonly = "readonly" } })
                @Html.ValidationMessage("Latitude", "", new { @class = "text-danger" })
            </div>
            @Html.Label("Longitude", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.longitude, new { htmlAttributes = new { @class = "form-control", required = "required", Id = "GetLongitudee", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.longitude, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Duration", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.TextBoxFor(model => model.Duration, new { @class = "form-control", id = "Duration", style = "width:260px", @readonly = "readonly", required = "required" })
                @Html.ValidationMessageFor(model => model.Duration, "", new { @class = "text-danger" })
            </div>
            @Html.Label("Date", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.TextBoxFor(x => x.Date, new { @class = "form-control", @Value = @DateTime.Now.ToShortDateString(), style = "width:260px", @readonly = "readonly" })
                @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-5 col-md-10">
                <input type="submit" value="Save" class="btn btn-primary" onclick="this.form.submit(); this.disabled = true;">
            </div>
        </div>
    </div>
}

@Scripts.Render("~/bundles/jquery")

@Scripts.Render("~/bundles/jqueryval")



<script language="javascript">
    window.onload = function () {
       

        var date = new Date().getHours();
        var date1 = new Date().getMinutes();

       
        document.getElementById("TxtOuttime").value = (date < 9 ? "0" : "") + date + ":" + (date1 <= 9 ? "0" : "") + date1;

 
      
        var start = $("#TxtIntime").val();
        var end = $("#TxtOuttime").val();
        start = start.split(":");
        end = end.split(":");
        var startDate = new Date(0, 0, 0, start[0], start[1], 0);
        var endDate = new Date(0, 0, 0, end[0], end[1], 0);
        var diff = endDate.getTime() - startDate.getTime();
        var hours = Math.floor(diff / 1000 / 60 / 60);
        diff -= hours * 1000 * 60 * 60;
        var minutes = Math.floor(diff / 1000 / 60);

        var final = (hours < 9 ? "0" : "") + hours + ":" + (minutes <= 9 ? "0" : "") + minutes;

        $("#Duration").val(final);

        debugger;


        if (final == "00:00")
        {
            $("#TxtOuttime").after("<div class='validation' style='color:red;margin-bottom: 20px;'>Out time Should be greater than in time  </div>");

            document.getElementById("Duration").value = "";
        }
        
    };

    $('#EmpIdHide').hide();


</script>

@*<script>
    $('#TxtOuttime').change(function () {

        $("#TxtOuttime").next('.validation').hide();
        if ($("#TxtIntime").val() >= $("#TxtOuttime").val()) {
            $("#TxtOuttime").after("<div class='validation' style='color:red;margin-bottom: 20px;'>Out time Should be greater than in time  </div>");
            document.getElementById("TxtOuttime").value = "";
            document.getElementById("Duration").value = "";
        }
        else {

            $("#TxtOuttime").next('.validation').hide();
            $("#Duration").next('.validation').hide();
        }
    });
</script>*@
@*<script>

    var x = document.getElementById("GetLatitude");
    var y = document.getElementById("GetLongitude");
    $(document).ready(function () {

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition);
        } else {
            x.innerHTML = "Geolocation is not supported by this browser.";
        }
    });
    function showPosition(position) {
        var z = position.coords.latitude;
        var X1 = position.coords.longitude;

        $("#GetLatitudee").val(z);
        $("#GetLongitudee").val(X1);
    }
</script>*@


